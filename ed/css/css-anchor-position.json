{
  "spec": {
    "title": "CSS Anchor Positioning",
    "url": "https://drafts.csswg.org/css-anchor-position-1/"
  },
  "properties": [
    {
      "name": "anchor-name",
      "value": "none | <dashed-ident>#",
      "initial": "none",
      "appliesTo": "all elements that generate a principal box",
      "inherited": "no",
      "percentages": "n/a",
      "computedValue": "as specified",
      "canonicalOrder": "per grammar",
      "animationType": "discrete",
      "values": [
        {
          "name": "none",
          "prose": "The property has no effect.",
          "type": "value",
          "value": "none"
        },
        {
          "name": "<dashed-ident>#",
          "prose": "If the element generates a principal box, the element is an anchor element, with a list of anchor names as specified. Each anchor name is a tree-scoped name. Otherwise, the property has no effect.",
          "type": "value",
          "value": "<dashed-ident>#"
        }
      ],
      "styleDeclaration": [
        "anchor-name",
        "anchorName"
      ]
    },
    {
      "name": "anchor-default",
      "value": "<anchor-element>",
      "initial": "implicit",
      "appliesTo": "absolutely positioned elements",
      "inherited": "no",
      "percentages": "n/a",
      "computedValue": "as specified",
      "canonicalOrder": "per grammar",
      "animationType": "discrete",
      "styleDeclaration": [
        "anchor-default",
        "anchorDefault"
      ]
    },
    {
      "name": "inset-area",
      "value": "none | <inset-area-span> [ / <inset-area-span> ]?",
      "initial": "none",
      "appliesTo": "positioned elements with a default anchor element",
      "inherited": "no",
      "percentages": "n/a",
      "computedValue": "as specified",
      "canonicalOrder": "per grammar",
      "animationType": "TBD",
      "values": [
        {
          "name": "none",
          "prose": "The property has no effect.",
          "type": "value",
          "value": "none"
        },
        {
          "name": "<inset-area-span>",
          "prose": "Behaves as <inset-area-span> / all, filling the entire row/column of the grid indicated by the specified value.",
          "type": "value",
          "value": "<inset-area-span>"
        },
        {
          "name": "<inset-area-span> [ / <inset-area-span> ]?",
          "prose": "If the element does not have a default anchor element, or is not an absolutely-positioned element, this value has no effect. Otherwise, the two spans define a rectangular region of the inset-area grid, and have the following effects: Any auto inset properties compute to the appropriate value to match the rectangular region. The normal value for the self-alignment properties behaves as either start, end, or anchor-center, depending on the positioning of the region, to give a good default alignment for the positioned element. See § 3.1.1 Resolving <inset-area-span>s for details on both of these effects. If the two <inset-area-span>s do not define a valid region, this property is invalid.",
          "type": "value",
          "value": "<inset-area-span> [ / <inset-area-span> ]?"
        }
      ],
      "styleDeclaration": [
        "inset-area",
        "insetArea"
      ]
    },
    {
      "name": "justify-self",
      "newValues": "anchor-center",
      "values": [
        {
          "name": "anchor-center",
          "prose": "The new anchor-center value makes this case extremely simple: if the positioned element has a default anchor element, then it is aligned so as to center itself over the default anchor element in the appropriate axis. If this alignment would cause it to overflow its inset-modified containing block in the appropriate axis, it instead is aligned flush with the side that it would have overflowed; if it would overflow both sides, it’s instead aligned as for start.",
          "type": "value",
          "value": "anchor-center"
        }
      ],
      "styleDeclaration": [
        "justify-self",
        "justifySelf"
      ]
    },
    {
      "name": "align-self",
      "newValues": "anchor-center",
      "values": [
        {
          "name": "anchor-center",
          "prose": "The new anchor-center value makes this case extremely simple: if the positioned element has a default anchor element, then it is aligned so as to center itself over the default anchor element in the appropriate axis. If this alignment would cause it to overflow its inset-modified containing block in the appropriate axis, it instead is aligned flush with the side that it would have overflowed; if it would overflow both sides, it’s instead aligned as for start.",
          "type": "value",
          "value": "anchor-center"
        }
      ],
      "styleDeclaration": [
        "align-self",
        "alignSelf"
      ]
    },
    {
      "name": "justify-items",
      "newValues": "anchor-center",
      "values": [
        {
          "name": "anchor-center",
          "prose": "The new anchor-center value makes this case extremely simple: if the positioned element has a default anchor element, then it is aligned so as to center itself over the default anchor element in the appropriate axis. If this alignment would cause it to overflow its inset-modified containing block in the appropriate axis, it instead is aligned flush with the side that it would have overflowed; if it would overflow both sides, it’s instead aligned as for start.",
          "type": "value",
          "value": "anchor-center"
        }
      ],
      "styleDeclaration": [
        "justify-items",
        "justifyItems"
      ]
    },
    {
      "name": "align-items",
      "newValues": "anchor-center",
      "values": [
        {
          "name": "anchor-center",
          "prose": "The new anchor-center value makes this case extremely simple: if the positioned element has a default anchor element, then it is aligned so as to center itself over the default anchor element in the appropriate axis. If this alignment would cause it to overflow its inset-modified containing block in the appropriate axis, it instead is aligned flush with the side that it would have overflowed; if it would overflow both sides, it’s instead aligned as for start.",
          "type": "value",
          "value": "anchor-center"
        }
      ],
      "styleDeclaration": [
        "align-items",
        "alignItems"
      ]
    },
    {
      "name": "position-fallback",
      "value": "none | <dashed-ident>",
      "initial": "none",
      "appliesTo": "absolutely-positioned elements",
      "inherited": "no",
      "percentages": "n/a",
      "computedValue": "as specified",
      "canonicalOrder": "per grammar",
      "animationType": "discrete",
      "values": [
        {
          "name": "none",
          "prose": "The property has no effect; the element does not use a position fallback list.",
          "type": "value",
          "value": "none"
        },
        {
          "name": "<dashed-ident>",
          "prose": "If there is a @position-fallback rule with a name matching the specified ident, then the element uses that position fallback list. Otherwise, this value has no effect.",
          "type": "value",
          "value": "<dashed-ident>"
        }
      ],
      "styleDeclaration": [
        "position-fallback",
        "positionFallback"
      ]
    },
    {
      "name": "position-fallback-bounds",
      "value": "normal | <dashed-ident>",
      "initial": "normal",
      "appliesTo": "absolutely positioned elements",
      "inherited": "no",
      "percentages": "n/a",
      "computedValue": "as specified",
      "canonicalOrder": "per grammar",
      "animationType": "discrete",
      "values": [
        {
          "name": "normal",
          "prose": "The element uses its normal (scroll-adjusted, inset-modified) containing block to determine if it’s overflowing for the purpose of selecting a position fallback list entry.",
          "type": "value",
          "value": "normal"
        }
      ],
      "styleDeclaration": [
        "position-fallback-bounds",
        "positionFallbackBounds"
      ]
    }
  ],
  "atrules": [
    {
      "name": "@position-fallback",
      "prose": "The @position-fallback rule defines a position fallback list with a given name, specifying one or more sets of positioning properties inside of @try blocks that will be applied to an element, with each successive one serving as fallback if the previous would cause the element to partially or fully overflow its containing block.",
      "descriptors": [],
      "value": "@position-fallback <dashed-ident> { <rule-list> } @try { <declaration-list> }"
    },
    {
      "name": "@try",
      "prose": "The @position-fallback rule defines a position fallback list with a given name, specifying one or more sets of positioning properties inside of @try blocks that will be applied to an element, with each successive one serving as fallback if the previous would cause the element to partially or fully overflow its containing block.",
      "descriptors": []
    }
  ],
  "selectors": [],
  "values": [
    {
      "name": "<inset-area-span>",
      "type": "type",
      "value": "[ start || end || center ] | [ self-start || self-end || center ] | [ top || bottom || center ] | [ left || right || center ] | [ x-start || x-end || center ] | [ y-start || y-end || center ] | [ x-self-start || x-self-end || center ] | [ y-self-start || y-self-end || center ] | all",
      "values": [
        {
          "name": "all",
          "prose": "All three regions of that axis, spanning the entire breadth of the containing block.",
          "type": "value",
          "value": "all"
        },
        {
          "name": "start",
          "prose": "Any single keyword refers just to that region in the axis. Like in anchor(), the plain logical keywords (start, end, etc) refer to the writing mdoe of the element’s containing block. The x-start/etc determine their direction in the same way, but in the specified physical axis. The \"self\" logical keyword (self-start, x-self-end, etc) are identical, but refer to the element’s own writing mode.",
          "type": "value",
          "value": "start"
        },
        {
          "name": "end",
          "prose": "Any single keyword refers just to that region in the axis. Like in anchor(), the plain logical keywords (start, end, etc) refer to the writing mdoe of the element’s containing block. The x-start/etc determine their direction in the same way, but in the specified physical axis. The \"self\" logical keyword (self-start, x-self-end, etc) are identical, but refer to the element’s own writing mode.",
          "type": "value",
          "value": "end"
        },
        {
          "name": "self-start",
          "prose": "Any single keyword refers just to that region in the axis. Like in anchor(), the plain logical keywords (start, end, etc) refer to the writing mdoe of the element’s containing block. The x-start/etc determine their direction in the same way, but in the specified physical axis. The \"self\" logical keyword (self-start, x-self-end, etc) are identical, but refer to the element’s own writing mode.",
          "type": "value",
          "value": "self-start"
        },
        {
          "name": "self-end",
          "prose": "Any single keyword refers just to that region in the axis. Like in anchor(), the plain logical keywords (start, end, etc) refer to the writing mdoe of the element’s containing block. The x-start/etc determine their direction in the same way, but in the specified physical axis. The \"self\" logical keyword (self-start, x-self-end, etc) are identical, but refer to the element’s own writing mode.",
          "type": "value",
          "value": "self-end"
        },
        {
          "name": "top",
          "prose": "Any single keyword refers just to that region in the axis. Like in anchor(), the plain logical keywords (start, end, etc) refer to the writing mdoe of the element’s containing block. The x-start/etc determine their direction in the same way, but in the specified physical axis. The \"self\" logical keyword (self-start, x-self-end, etc) are identical, but refer to the element’s own writing mode.",
          "type": "value",
          "value": "top"
        },
        {
          "name": "bottom",
          "prose": "Any single keyword refers just to that region in the axis. Like in anchor(), the plain logical keywords (start, end, etc) refer to the writing mdoe of the element’s containing block. The x-start/etc determine their direction in the same way, but in the specified physical axis. The \"self\" logical keyword (self-start, x-self-end, etc) are identical, but refer to the element’s own writing mode.",
          "type": "value",
          "value": "bottom"
        },
        {
          "name": "left",
          "prose": "Any single keyword refers just to that region in the axis. Like in anchor(), the plain logical keywords (start, end, etc) refer to the writing mdoe of the element’s containing block. The x-start/etc determine their direction in the same way, but in the specified physical axis. The \"self\" logical keyword (self-start, x-self-end, etc) are identical, but refer to the element’s own writing mode.",
          "type": "value",
          "value": "left"
        },
        {
          "name": "right",
          "prose": "Any single keyword refers just to that region in the axis. Like in anchor(), the plain logical keywords (start, end, etc) refer to the writing mdoe of the element’s containing block. The x-start/etc determine their direction in the same way, but in the specified physical axis. The \"self\" logical keyword (self-start, x-self-end, etc) are identical, but refer to the element’s own writing mode.",
          "type": "value",
          "value": "right"
        },
        {
          "name": "y-start",
          "prose": "Any single keyword refers just to that region in the axis. Like in anchor(), the plain logical keywords (start, end, etc) refer to the writing mdoe of the element’s containing block. The x-start/etc determine their direction in the same way, but in the specified physical axis. The \"self\" logical keyword (self-start, x-self-end, etc) are identical, but refer to the element’s own writing mode.",
          "type": "value",
          "value": "y-start"
        },
        {
          "name": "y-end",
          "prose": "Any single keyword refers just to that region in the axis. Like in anchor(), the plain logical keywords (start, end, etc) refer to the writing mdoe of the element’s containing block. The x-start/etc determine their direction in the same way, but in the specified physical axis. The \"self\" logical keyword (self-start, x-self-end, etc) are identical, but refer to the element’s own writing mode.",
          "type": "value",
          "value": "y-end"
        },
        {
          "name": "y-self-start",
          "prose": "Any single keyword refers just to that region in the axis. Like in anchor(), the plain logical keywords (start, end, etc) refer to the writing mdoe of the element’s containing block. The x-start/etc determine their direction in the same way, but in the specified physical axis. The \"self\" logical keyword (self-start, x-self-end, etc) are identical, but refer to the element’s own writing mode.",
          "type": "value",
          "value": "y-self-start"
        },
        {
          "name": "y-self-end",
          "prose": "Any single keyword refers just to that region in the axis. Like in anchor(), the plain logical keywords (start, end, etc) refer to the writing mdoe of the element’s containing block. The x-start/etc determine their direction in the same way, but in the specified physical axis. The \"self\" logical keyword (self-start, x-self-end, etc) are identical, but refer to the element’s own writing mode.",
          "type": "value",
          "value": "y-self-end"
        },
        {
          "name": "x-start",
          "prose": "Any single keyword refers just to that region in the axis. Like in anchor(), the plain logical keywords (start, end, etc) refer to the writing mdoe of the element’s containing block. The x-start/etc determine their direction in the same way, but in the specified physical axis. The \"self\" logical keyword (self-start, x-self-end, etc) are identical, but refer to the element’s own writing mode.",
          "type": "value",
          "value": "x-start"
        },
        {
          "name": "x-end",
          "prose": "Any single keyword refers just to that region in the axis. Like in anchor(), the plain logical keywords (start, end, etc) refer to the writing mdoe of the element’s containing block. The x-start/etc determine their direction in the same way, but in the specified physical axis. The \"self\" logical keyword (self-start, x-self-end, etc) are identical, but refer to the element’s own writing mode.",
          "type": "value",
          "value": "x-end"
        },
        {
          "name": "x-self-start",
          "prose": "Any single keyword refers just to that region in the axis. Like in anchor(), the plain logical keywords (start, end, etc) refer to the writing mdoe of the element’s containing block. The x-start/etc determine their direction in the same way, but in the specified physical axis. The \"self\" logical keyword (self-start, x-self-end, etc) are identical, but refer to the element’s own writing mode.",
          "type": "value",
          "value": "x-self-start"
        },
        {
          "name": "x-self-end",
          "prose": "Any single keyword refers just to that region in the axis. Like in anchor(), the plain logical keywords (start, end, etc) refer to the writing mdoe of the element’s containing block. The x-start/etc determine their direction in the same way, but in the specified physical axis. The \"self\" logical keyword (self-start, x-self-end, etc) are identical, but refer to the element’s own writing mode.",
          "type": "value",
          "value": "x-self-end"
        },
        {
          "name": "center",
          "prose": "Any single keyword refers just to that region in the axis. Like in anchor(), the plain logical keywords (start, end, etc) refer to the writing mdoe of the element’s containing block. The x-start/etc determine their direction in the same way, but in the specified physical axis. The \"self\" logical keyword (self-start, x-self-end, etc) are identical, but refer to the element’s own writing mode.",
          "type": "value",
          "value": "center"
        }
      ]
    },
    {
      "name": "<anchor-element>",
      "type": "type",
      "value": "<dashed-ident> | implicit"
    },
    {
      "name": "<anchor-side>",
      "type": "type",
      "value": "auto | auto-same | top | left | right | bottom | start | end | self-start | self-end | <percentage> | center"
    },
    {
      "name": "anchor-size()",
      "prose": "An absolutely-positioned element can use the anchor-size() function in its sizing properties to refer to the size of one or more anchor elements. The anchor-size() function resolves to a <length>.",
      "type": "function",
      "value": "anchor( <anchor-element>? <anchor-size>, <length-percentage>? )",
      "values": [
        {
          "name": "width",
          "prose": "The physical <anchor-size> keywords (width and height) refer to the width and height, respectively, of the target anchor element. Unlike anchor(), there is no restriction on having to match axises; for example, width: anchor-size(--foo height); is valid.",
          "type": "value",
          "value": "width"
        },
        {
          "name": "height",
          "prose": "The physical <anchor-size> keywords (width and height) refer to the width and height, respectively, of the target anchor element. Unlike anchor(), there is no restriction on having to match axises; for example, width: anchor-size(--foo height); is valid.",
          "type": "value",
          "value": "height"
        },
        {
          "name": "block",
          "prose": "The logical <anchor-size> keywords (block, inline, self-block, and self-inline) map to one of the physical keywords according to either the writing mode of the element (for self-block and self-inline) or the writing mode of the element’s containing block (for block and inline).",
          "type": "value",
          "value": "block"
        },
        {
          "name": "inline",
          "prose": "The logical <anchor-size> keywords (block, inline, self-block, and self-inline) map to one of the physical keywords according to either the writing mode of the element (for self-block and self-inline) or the writing mode of the element’s containing block (for block and inline).",
          "type": "value",
          "value": "inline"
        },
        {
          "name": "self-block",
          "prose": "The logical <anchor-size> keywords (block, inline, self-block, and self-inline) map to one of the physical keywords according to either the writing mode of the element (for self-block and self-inline) or the writing mode of the element’s containing block (for block and inline).",
          "type": "value",
          "value": "self-block"
        },
        {
          "name": "self-inline",
          "prose": "The logical <anchor-size> keywords (block, inline, self-block, and self-inline) map to one of the physical keywords according to either the writing mode of the element (for self-block and self-inline) or the writing mode of the element’s containing block (for block and inline).",
          "type": "value",
          "value": "self-inline"
        }
      ]
    },
    {
      "name": "<anchor-size>",
      "type": "type",
      "value": "width | height | block | inline | self-block | self-inline"
    }
  ],
  "warnings": [
    {
      "msg": "Missing definition",
      "name": "<anchor()>",
      "value": "anchor( <anchor-element>? <anchor-side>, <length-percentage>? )"
    },
    {
      "msg": "Dangling value",
      "name": "<dashed-ident>",
      "prose": "Specifies the anchor name it will look for. This name is a tree-scoped reference.",
      "type": "value",
      "value": "<dashed-ident>",
      "for": "anchor()"
    },
    {
      "msg": "Dangling value",
      "name": "implicit",
      "prose": "Selects the implicit anchor element defined for the element, if possible.",
      "type": "value",
      "value": "implicit",
      "for": "anchor()"
    },
    {
      "msg": "Dangling value",
      "name": "auto",
      "prose": "Resolves to one of the anchor element’s sides, depending on which inset property it’s used in. Also triggers automatic fallback behavior. See § 3.2.1 Automatic Anchor Positioning for more details.",
      "type": "value",
      "value": "auto",
      "for": "anchor()"
    },
    {
      "msg": "Dangling value",
      "name": "auto-same",
      "prose": "Resolves to one of the anchor element’s sides, depending on which inset property it’s used in. Also triggers automatic fallback behavior. See § 3.2.1 Automatic Anchor Positioning for more details.",
      "type": "value",
      "value": "auto-same",
      "for": "anchor()"
    },
    {
      "msg": "Dangling value",
      "name": "top",
      "prose": "Refers to the specified side of the anchor element.",
      "type": "value",
      "value": "top",
      "for": "anchor()"
    },
    {
      "msg": "Dangling value",
      "name": "right",
      "prose": "Refers to the specified side of the anchor element.",
      "type": "value",
      "value": "right",
      "for": "anchor()"
    },
    {
      "msg": "Dangling value",
      "name": "bottom",
      "prose": "Refers to the specified side of the anchor element.",
      "type": "value",
      "value": "bottom",
      "for": "anchor()"
    },
    {
      "msg": "Dangling value",
      "name": "left",
      "prose": "Refers to the specified side of the anchor element.",
      "type": "value",
      "value": "left",
      "for": "anchor()"
    },
    {
      "msg": "Dangling value",
      "name": "start",
      "prose": "Refers to one of the sides of the anchor element in the same axis as the inset property it’s used in, by resolving the keyword against the writing mode of either the positioned element (for self-start and self-end) or the positioned element’s containing block (for start and end).",
      "type": "value",
      "value": "start",
      "for": "anchor()"
    },
    {
      "msg": "Dangling value",
      "name": "end",
      "prose": "Refers to one of the sides of the anchor element in the same axis as the inset property it’s used in, by resolving the keyword against the writing mode of either the positioned element (for self-start and self-end) or the positioned element’s containing block (for start and end).",
      "type": "value",
      "value": "end",
      "for": "anchor()"
    },
    {
      "msg": "Dangling value",
      "name": "self-start",
      "prose": "Refers to one of the sides of the anchor element in the same axis as the inset property it’s used in, by resolving the keyword against the writing mode of either the positioned element (for self-start and self-end) or the positioned element’s containing block (for start and end).",
      "type": "value",
      "value": "self-start",
      "for": "anchor()"
    },
    {
      "msg": "Dangling value",
      "name": "self-end",
      "prose": "Refers to one of the sides of the anchor element in the same axis as the inset property it’s used in, by resolving the keyword against the writing mode of either the positioned element (for self-start and self-end) or the positioned element’s containing block (for start and end).",
      "type": "value",
      "value": "self-end",
      "for": "anchor()"
    },
    {
      "msg": "Dangling value",
      "name": "<percentage>",
      "prose": "Refers to a position a corresponding percentage between the start and end sides, with 0% being equivalent to start and 100% being equivalent to end. center is equivalent to 50%.",
      "type": "value",
      "value": "<percentage>",
      "for": "anchor()"
    },
    {
      "msg": "Dangling value",
      "name": "center",
      "prose": "Refers to a position a corresponding percentage between the start and end sides, with 0% being equivalent to start and 100% being equivalent to end. center is equivalent to 50%.",
      "type": "value",
      "value": "center",
      "for": "anchor()"
    }
  ]
}
