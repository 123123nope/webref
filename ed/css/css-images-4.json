{
  "spec": {
    "title": "CSS Images Module Level 4",
    "url": "https://drafts.csswg.org/css-images-4/"
  },
  "properties": {
    "object-view-box": {
      "name": "object-view-box",
      "value": "none | <basic-shape-rect>",
      "initial": "none",
      "appliesTo": "replaced elements",
      "inherited": "no",
      "percentages": "n/a",
      "computedValue": "specified keyword, or computed function",
      "canonicalOrder": "per grammar",
      "animationType": "as if possible, otherwise discrete",
      "styleDeclaration": [
        "object-view-box",
        "objectViewBox"
      ]
    },
    "object-fit": {
      "name": "object-fit",
      "value": "fill | none | [contain | cover] || scale-down",
      "initial": "fill",
      "appliesTo": "replaced elements",
      "inherited": "no",
      "percentages": "n/a",
      "computedValue": "specified keyword(s)",
      "canonicalOrder": "per grammar",
      "animationType": "discrete",
      "styleDeclaration": [
        "object-fit",
        "objectFit"
      ]
    },
    "image-resolution": {
      "name": "image-resolution",
      "value": "[ from-image || <resolution> ] && snap?",
      "initial": "1dppx",
      "appliesTo": "all elements",
      "inherited": "yes",
      "percentages": "n/a",
      "computedValue": "specified keyword(s) and/or <resolution> (possibly adjusted for snap, see below)",
      "canonicalOrder": "per grammar",
      "animationType": "discrete",
      "styleDeclaration": [
        "image-resolution",
        "imageResolution"
      ]
    }
  },
  "atrules": {},
  "valuespaces": {
    "<image-set()>": {
      "prose": "Delivering the most appropriate image resolution for a user’s device can be a difficult task. Ideally, images should be in the same resolution as the device they’re being viewed in, which can vary between users. However, other factors can factor into the decision of which image to send; for example, if the user is on a slow mobile connection, they may prefer to receive lower-res images rather than waiting for a large proper-res image to load. The image-set() function allows an author to ignore most of these issues, simply providing multiple resolutions of an image and letting the UA decide which is most appropriate in a given situation.",
      "value": "image-set( <image-set-option># )"
    },
    "<type()>": {
      "value": "type( <string> )"
    },
    "<repeating-linear-gradient()>": {
      "prose": "In addition to linear-gradient(), radial-gradient(), and conic-gradient(), this specification defines repeating-linear-gradient(), repeating-radial-gradient(), and repeating-conic-gradient() values. These notations take the same values and are interpreted the same as their respective non-repeating siblings defined previously."
    },
    "<repeating-radial-gradient()>": {
      "prose": "In addition to linear-gradient(), radial-gradient(), and conic-gradient(), this specification defines repeating-linear-gradient(), repeating-radial-gradient(), and repeating-conic-gradient() values. These notations take the same values and are interpreted the same as their respective non-repeating siblings defined previously."
    },
    "<repeating-conic-gradient()>": {
      "prose": "In addition to linear-gradient(), radial-gradient(), and conic-gradient(), this specification defines repeating-linear-gradient(), repeating-radial-gradient(), and repeating-conic-gradient() values. These notations take the same values and are interpreted the same as their respective non-repeating siblings defined previously."
    },
    "<-webkit-image-set()>": {
      "prose": "Implementations must accept -webkit-image-set() as a parse-time alias of image-set(). (It’s a valid value, with identical arguments to image-set(), and is turned into image-set() during parsing.)"
    },
    "<image>": {
      "value": "<url> | <image()> | <image-set()> | <cross-fade()> | <element()> | <gradient>"
    },
    "<image-set-option>": {
      "value": "[ <image> | <string> ] [ <resolution> || type(<string>) ]"
    },
    "<image()>": {
      "value": "image( <image-tags>? [ <image-src>? , <color>? ]! )"
    },
    "<image-tags>": {
      "value": "[ ltr | rtl ]"
    },
    "<image-src>": {
      "value": "[ <url> | <string> ]"
    },
    "<cross-fade()>": {
      "value": "cross-fade( <cf-image># )"
    },
    "<cf-image>": {
      "value": "<percentage [0,100]>? && [ <image> | <color> ]"
    },
    "<element()>": {
      "value": "element( <id-selector> )"
    },
    "<gradient>": {
      "value": "[ <linear-gradient()> | <repeating-linear-gradient()> | <radial-gradient()> | <repeating-radial-gradient()> | <conic-gradient()> | <repeating-conic-gradient()> ]"
    },
    "<linear-gradient()>": {
      "value": "linear-gradient( [ <angle> | to <side-or-corner> ]? || <color-interpolation-method>, <color-stop-list> )"
    },
    "<side-or-corner>": {
      "value": "[left | right] || [top | bottom]"
    },
    "<radial-gradient()>": {
      "value": "radial-gradient( [[ <ending-shape> || <size> ]? [ at <position> ]? ] || <color-interpolation-method>, <color-stop-list> )"
    },
    "<conic-gradient()>": {
      "value": "conic-gradient( [ [ from <angle> ]? [ at <position> ]? ] || <color-interpolation-method>, <angular-color-stop-list> )"
    },
    "<color-stop-list>": {
      "value": "<linear-color-stop> , [ <linear-color-hint>? , <linear-color-stop> ]#"
    },
    "<linear-color-stop>": {
      "value": "<color> && <color-stop-length>?"
    },
    "<linear-color-hint>": {
      "value": "<length-percentage>"
    },
    "<color-stop-length>": {
      "value": "<length-percentage>{1,2}"
    },
    "<angular-color-stop-list>": {
      "value": "<angular-color-stop> , [ <angular-color-hint>? , <angular-color-stop> ]#"
    },
    "<angular-color-stop>": {
      "value": "<color> && <color-stop-angle>?"
    },
    "<angular-color-hint>": {
      "value": "<angle-percentage>"
    },
    "<color-stop-angle>": {
      "value": "<angle-percentage>{1,2}"
    },
    "<color-stop>": {
      "value": "<color-stop-length> | <color-stop-angle>"
    }
  }
}
