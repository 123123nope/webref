{
  "spec": {
    "title": "CSS Ruby Annotation Layout Module Level 1",
    "url": "https://drafts.csswg.org/css-ruby-1/"
  },
  "properties": [
    {
      "name": "ruby-position",
      "value": "[ alternate || [ over | under ] ] | inter-character",
      "initial": "alternate",
      "appliesTo": "ruby annotation containers",
      "inherited": "yes",
      "percentages": "n/a",
      "computedValue": "specified keyword",
      "canonicalOrder": "per grammar",
      "animationType": "discrete",
      "values": [
        {
          "name": "alternate",
          "prose": "Different levels of annotations alternate between over and under. If the annotation container is the first level of annotation in its ruby segment, or if all prior levels are inter-character, then alternate, either on its own or in combination with over, behaves the same as over, while alternate in combination with under behaves the same as under. Otherwise, if the previous level of interlinear annotation is over, alternate behaves like under, and vice versa. (In this case, whether alternate is specified alone or in combination with over or under makes no difference.)",
          "type": "value",
          "value": "alternate"
        },
        {
          "name": "over",
          "prose": "The ruby annotation appears line-over the base. Ruby over Japanese base text in horizontal layout Ruby to the right of Japanese base text in vertical layout",
          "type": "value",
          "value": "over"
        },
        {
          "name": "under",
          "prose": "The ruby annotation appears line-under the base. This is a relatively rare setting used in ideographic East Asian writing systems, most easily found in educational text. Ruby under Japanese base text in horizontal layout Ruby to the left of Japanese base text in vertical layout",
          "type": "value",
          "value": "under"
        },
        {
          "name": "inter-character",
          "prose": "If the writing mode of the enclosing ruby container is vertical, this value has the same effect as over. Otherwise, the ruby annotation becomes an inter-character annotation Info about the 'inter-character annotation' definition.#ruby-position-inter-character-annotationReferenced in: 2.5. White Space Collapsing 3. Ruby Layout 3.1.1. Inline-axis Interlinear Layout 3.1.2. Block-axis Interlinear Layout 3.2. Inter-character Ruby Layout (2) (3) (4) (5) (6) (7) (8) (9) 3.4. Breaking Across Lines 3.4.2. Breaking Within Bases 4.1. Ruby Positioning: the ruby-position property (2) (3) 4.2. Sharing Annotation Space: the ruby-merge property 4.3. Ruby Text Distribution: the ruby-align property Changes since the 2 December 2021 WD Changes since the 29 April 2020 WD (2) . The annotation appears on the right of the base in horizontal text. This forces the computed value of writing-mode of the ruby annotation children of this ruby annotation container to be vertical-rl. This value is provided for the special case of traditional Chinese as used especially in Taiwan: ruby (made of bopomofo glyphs) in that context appears vertically along the right side of the base glyph, even when the layout of the base characters is horizontal: “Bopomofo” ruby in traditional Chinese (ruby annotation shown in blue for clarity) in horizontal layout",
          "type": "value",
          "value": "inter-character"
        }
      ],
      "styleDeclaration": [
        "ruby-position",
        "rubyPosition"
      ]
    },
    {
      "name": "ruby-merge",
      "value": "separate | merge | auto",
      "initial": "separate",
      "appliesTo": "interlinear ruby annotation containers",
      "inherited": "yes",
      "percentages": "n/a",
      "computedValue": "specified keyword",
      "canonicalOrder": "per grammar",
      "animationType": "by computed value type",
      "values": [
        {
          "name": "separate",
          "prose": "Each ruby annotation box is rendered within the same column(s) as its corresponding base box(es), i.e. without overlapping adjacent bases on either side. This style is called “mono ruby” in [JLREQ]. ruby-merge: separate with center alignment For example, the following two lines render the same: <p><ruby>無<rt>む</ruby><ruby>常<rt>じょう</ruby> <p><ruby style=\"ruby-merge:separate\"><rb>無<rb>常<rt>む<rt>じょう</ruby>",
          "type": "value",
          "value": "separate"
        },
        {
          "name": "merge",
          "prose": "All ruby annotation boxes within the same ruby segment on the same line are concatenated as inline boxes within their annotation container, and laid out in a single anonymous ruby annotation box spanning all their associated ruby base boxes. When laid out on a single line, this style renders similar to “group ruby” in [JLREQ]. However, when it breaks across lines, ruby annotations are kept together with their respective ruby bases. ruby-merge: merge with center alignment The following two lines render the same if both characters fit on one line: <p><ruby>無常<rt>むじょう</ruby> <p><ruby style=\"ruby-merge:merge\"><rb>無<rb>常<rt>む<rt>じょう</ruby> However, the second one renders the same as ruby-position: separate when the two bases are split across lines.",
          "type": "value",
          "value": "merge"
        },
        {
          "name": "auto",
          "prose": "The user agent may use any algorithm to determine how each ruby annotation box is rendered to its corresponding base box, with the intention that if all annotations fit over their respective bases, the result is identical to separate, but if some annotations are wider than their bases the space is shared in some way to avoid imposing space between bases. ruby-merge: auto with center alignment",
          "type": "value",
          "value": "auto"
        }
      ],
      "styleDeclaration": [
        "ruby-merge",
        "rubyMerge"
      ]
    },
    {
      "name": "ruby-align",
      "value": "start | center | space-between | space-around",
      "initial": "space-around",
      "appliesTo": "ruby bases, ruby annotations, ruby base containers, ruby annotation containers",
      "inherited": "yes",
      "percentages": "n/a",
      "computedValue": "specified keyword",
      "canonicalOrder": "per grammar",
      "animationType": "by computed value type",
      "values": [
        {
          "name": "start",
          "prose": "The ruby content is aligned with the start edge of its box. start ruby distribution \"Katatsuki ruby\" (肩付きルビ) is close to, but not quite the same as, this start value. In particular, its behavior when overhanging its base can differ from start alignment depending on surrounding context, see JLREQ. Also, it’s only ever used in vertical writing, and the JLTF considers it not particularly important, so it may not be worth the effort to make this value smart enough to deal with katatsuki ruby. If start is needed for some other purpose, we should keep it. Otherwise, maybe just drop it?",
          "type": "value",
          "value": "start"
        },
        {
          "name": "center",
          "prose": "The ruby content is centered within its box. center ruby distribution",
          "type": "value",
          "value": "center"
        },
        {
          "name": "space-between",
          "prose": "The ruby content expands as defined for normal text justification (as defined by text-justify), except that if there are no justification opportunities the content is centered. space-between ruby distribution",
          "type": "value",
          "value": "space-between"
        },
        {
          "name": "space-around",
          "prose": "As for space-between except that there exists an extra justification opportunities whose space is distributed half before and half after the ruby content. space-around ruby distribution",
          "type": "value",
          "value": "space-around"
        }
      ],
      "styleDeclaration": [
        "ruby-align",
        "rubyAlign"
      ]
    },
    {
      "name": "ruby-overhang",
      "value": "auto | none",
      "initial": "auto",
      "appliesTo": "ruby annotation containers",
      "inherited": "yes",
      "percentages": "n/a",
      "computedValue": "specified keyword",
      "canonicalOrder": "per grammar",
      "animationType": "by computed value type",
      "values": [
        {
          "name": "auto",
          "prose": "When a ruby annotation container is longer than its corresponding ruby base container, the ruby annotation container may partially overlap adjacent boxes. Whether, how much, and under which conditions to overhang are determined by the UA.",
          "type": "value",
          "value": "auto"
        },
        {
          "name": "none",
          "prose": "A ruby annotation container is never allowed to extend past the ruby annotation container.",
          "type": "value",
          "value": "none"
        }
      ],
      "styleDeclaration": [
        "ruby-overhang",
        "rubyOverhang"
      ]
    }
  ],
  "atrules": [],
  "selectors": [],
  "values": [],
  "warnings": [
    {
      "msg": "Dangling value",
      "name": "ruby",
      "prose": "Specifies that an element generates a ruby container box Info about the 'ruby container box' definition.#ruby-containerReferenced in: 2.1.1. The Ruby Formatting Context (2) (3) (4) (5) (6) (7) (8) (9) (10) 2.1.2. Non-Inline Ruby (2) 2.2. Anonymous Ruby Box Generation (2) (3) (4) (5) (6) (7) 2.3.1. Segment Pairing and Annotation Levels (2) 2.3.2. Unit Pairing and Spanning Annotations 2.5. White Space Collapsing 3. Ruby Layout (2) 3.1. Interlinear Ruby Layout 3.1.1. Inline-axis Interlinear Layout 3.1.2. Block-axis Interlinear Layout (2) 3.2. Inter-character Ruby Layout 3.3. Styling Ruby Boxes 3.4. Breaking Across Lines 3.4.1. Breaking Between Bases 3.5. Bidi Reordering (2) (3) (4) 3.6. Line Spacing (2) 4.1. Ruby Positioning: the ruby-position property 5.1. Overhanging Ruby: the ruby-overhang property (2) (3) . (Corresponds to HTML/XHTML <ruby> elements.)",
      "type": "value",
      "value": "ruby",
      "for": "display"
    },
    {
      "msg": "Dangling value",
      "name": "ruby-base",
      "prose": "Specifies that an element generates a ruby base box Info about the 'ruby base box' definition.#ruby-base-boxReferenced in: 2. Ruby Box Model (2) (3) 2.1.1. The Ruby Formatting Context (2) 2.2. Anonymous Ruby Box Generation (2) (3) (4) (5) (6) (7) (8) (9) (10) (11) (12) 2.3. Annotation Pairing (2) (3) (4) 2.3.2. Unit Pairing and Spanning Annotations (2) (3) (4) (5) (6) (7) (8) (9) (10) 2.4. Hiding Annotations: visibility: collapse and auto-hidden ruby 2.5. White Space Collapsing (2) 3. Ruby Layout 3.1. Interlinear Ruby Layout 3.1.1. Inline-axis Interlinear Layout (2) (3) (4) (5) (6) (7) (8) (9) (10) (11) (12) 3.1.2. Block-axis Interlinear Layout (2) (3) 3.2. Inter-character Ruby Layout (2) (3) (4) (5) (6) 3.3. Styling Ruby Boxes 3.4. Breaking Across Lines (2) (3) 3.4.1. Breaking Between Bases (2) (3) (4) (5) (6) 3.4.2. Breaking Within Bases (2) (3) 3.5. Bidi Reordering (2) (3) (4) (5) 4.2. Sharing Annotation Space: the ruby-merge property (2) (3) 4.3. Ruby Text Distribution: the ruby-align property 5.1. Overhanging Ruby: the ruby-overhang property (2) (3) 5.2. Line-edge Alignment A.3 Generating Parentheses . (Corresponds to HTML/XHTML <rb> elements.)",
      "type": "value",
      "value": "ruby-base",
      "for": "display"
    },
    {
      "msg": "Dangling value",
      "name": "ruby-text",
      "prose": "Specifies that an element generates a ruby annotation box Info about the 'ruby annotation box' definition.#ruby-annotation-boxReferenced in: 2. Ruby Box Model (2) (3) 2.1.1. The Ruby Formatting Context (2) 2.2. Anonymous Ruby Box Generation (2) (3) (4) (5) (6) (7) (8) (9) (10) (11) (12) 2.3. Annotation Pairing (2) (3) (4) (5) (6) 2.3.2. Unit Pairing and Spanning Annotations (2) (3) (4) (5) (6) (7) (8) (9) (10) (11) (12) (13) 2.4. Hiding Annotations: visibility: collapse and auto-hidden ruby (2) (3) (4) 2.5. White Space Collapsing 3.1. Interlinear Ruby Layout (2) 3.1.1. Inline-axis Interlinear Layout (2) (3) (4) (5) (6) (7) (8) (9) (10) (11) 3.1.2. Block-axis Interlinear Layout (2) (3) (4) 3.2. Inter-character Ruby Layout (2) (3) (4) (5) (6) (7) (8) (9) (10) (11) 3.3. Styling Ruby Boxes 3.4. Breaking Across Lines (2) (3) 3.4.1. Breaking Between Bases (2) 3.4.2. Breaking Within Bases (2) 3.5. Bidi Reordering (2) (3) (4) (5) (6) 3.6. Line Spacing (2) (3) 4.1. Ruby Positioning: the ruby-position property (2) (3) (4) (5) (6) (7) 4.2. Sharing Annotation Space: the ruby-merge property (2) (3) (4) 4.3. Ruby Text Distribution: the ruby-align property (2) (3) 5.1. Overhanging Ruby: the ruby-overhang property (2) (3) (4) (5) 5.2. Line-edge Alignment (2) Changes since the 2 December 2021 WD (2) . (Corresponds to HTML/XHTML <rt> elements.)",
      "type": "value",
      "value": "ruby-text",
      "for": "display"
    },
    {
      "msg": "Dangling value",
      "name": "ruby-base-container",
      "prose": "Specifies that an element generates a ruby base container box Info about the 'ruby base container box' definition.#ruby-base-container-boxReferenced in: 2.1.1. The Ruby Formatting Context 2.2. Anonymous Ruby Box Generation (2) (3) (4) (5) (6) (7) (8) (9) (10) (11) (12) (13) 2.3.1. Segment Pairing and Annotation Levels (2) (3) (4) (5) 2.3.2. Unit Pairing and Spanning Annotations (2) (3) 2.5. White Space Collapsing (2) 3. Ruby Layout 3.1.1. Inline-axis Interlinear Layout 3.1.2. Block-axis Interlinear Layout (2) (3) (4) (5) 3.2. Inter-character Ruby Layout 3.3. Styling Ruby Boxes (2) 3.5. Bidi Reordering 3.6. Line Spacing (2) 5.1. Overhanging Ruby: the ruby-overhang property . (Corresponds to XHTML <rbc> elements; generated as an anonymous box in HTML.)",
      "type": "value",
      "value": "ruby-base-container",
      "for": "display"
    },
    {
      "msg": "Dangling value",
      "name": "ruby-text-container",
      "prose": "Specifies that an element generates a ruby annotation container box Info about the 'ruby annotation container box' definition.#ruby-annotation-container-boxReferenced in: 2.1.1. The Ruby Formatting Context 2.2. Anonymous Ruby Box Generation (2) (3) (4) (5) (6) (7) (8) (9) (10) 2.3.1. Segment Pairing and Annotation Levels (2) (3) (4) (5) 2.3.2. Unit Pairing and Spanning Annotations (2) (3) (4) (5) 2.4. Hiding Annotations: visibility: collapse and auto-hidden ruby 2.5. White Space Collapsing (2) (3) 3.1.1. Inline-axis Interlinear Layout (2) (3) (4) (5) (6) 3.1.2. Block-axis Interlinear Layout (2) (3) (4) (5) 3.2. Inter-character Ruby Layout (2) 3.3. Styling Ruby Boxes (2) (3) 3.5. Bidi Reordering (2) (3) (4) 3.6. Line Spacing (2) (3) 4.1. Ruby Positioning: the ruby-position property (2) (3) (4) (5) (6) (7) (8) (9) (10) 4.2. Sharing Annotation Space: the ruby-merge property 4.3. Ruby Text Distribution: the ruby-align property (2) 5.1. Overhanging Ruby: the ruby-overhang property (2) (3) (4) (5) Changes since the 2 December 2021 WD . (Corresponds to HTML/XHTML <rtc> elements.)",
      "type": "value",
      "value": "ruby-text-container",
      "for": "display"
    }
  ]
}
